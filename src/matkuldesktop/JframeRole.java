/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matkuldesktop;
 import java.sql.Connection; 
import java.sql.DriverManager; 
import java.sql.Statement;
 import java.sql.ResultSet; 
import java.sql.SQLException; 
import javax.swing.JOptionPane; 
import javax.swing.table.DefaultTableModel;
import java.awt.event.KeyEvent;


/**
 *
 * @author Dzikr
 */


public class JframeRole extends javax.swing.JFrame {
    public DefaultTableModel model; 
    
    String rool_id;
    /**
     * Creates new form JframeRole4
     */
    public JframeRole() {
        initComponents();
        HeaderTable();
    }
    
     public void HeaderTable()
     {
        //memberi penamaan pada kolom Jtabel
         model=new DefaultTableModel();
         Trole.setModel(model);
         model.addColumn("Role ID");
         model.addColumn("Nama Role ");
         model.addColumn("Date Modify");
         model.addColumn("Date Create");
         datatotabel();
     }
     
     
     
 public void datatotabel()
    {
        //menghapus isi table tblGaji
         model.getDataVector().removeAllElements();
         model.fireTableDataChanged();
            
        try{
              Statement stat=(Statement)Koneksi.Getkoneksi().createStatement();
              
              String sql="select *from trole";
              ResultSet rs=stat.executeQuery(sql);
             while (rs.next())
             {
                 Object[] fieldx=new Object[4];
                 fieldx[0]=rs.getString("roleid");    
                 fieldx[1]=rs.getString("namarole");  
                 fieldx[2]=rs.getString("datacreate");
                 fieldx[3]=rs.getString("datamodify");  
                 
                 model.addRow(fieldx);
              }             
        }//akhir try
        catch(SQLException e){
            JOptionPane.showMessageDialog(null, 
e.getMessage() );   
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Trole = new javax.swing.JTable();
        simpan = new javax.swing.JButton();
        del = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        role = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        export = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Trole.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Trole.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TroleMouseClicked(evt);
            }
        });
        Trole.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TroleKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Trole);

        simpan.setText("Save");
        simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanActionPerformed(evt);
            }
        });

        del.setText("delete");
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });

        exit.setText("exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel1.setText("Role Type : ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Role User");

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        export.setText("Export");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(42, 42, 42)
                                .addComponent(role, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(simpan)
                                    .addGap(38, 38, 38)
                                    .addComponent(del)
                                    .addGap(18, 18, 18)
                                    .addComponent(update)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(exit))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(export)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(role, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simpan)
                    .addComponent(del)
                    .addComponent(exit)
                    .addComponent(update))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(export)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
    int selectedRow = Trole.getSelectedRow(); // Ambil baris yang dipilih di tabel
    if (selectedRow == -1) { // Jika tidak ada yang dipilih
        JOptionPane.showMessageDialog(this, "Pilih data yang ingin dihapus!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String rolename = model.getValueAt(selectedRow, 1).toString(); // Ambil Nama Role dari tabel

    int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus " + rolename + "?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        try {
            Statement stmt = Koneksi.Getkoneksi().createStatement();
            String sql = "DELETE FROM trole WHERE namarole='" + rolename + "'";
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus!", "Success", JOptionPane.INFORMATION_MESSAGE);
            HeaderTable(); // Refresh tabel setelah delete
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus data\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    del.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        delActionPerformed(evt);
    }
});

 

    }//GEN-LAST:event_delActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
    int confirm = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin keluar?", "Konfirmasi Keluar", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        System.exit(0); // Keluar dari program
    }
    }//GEN-LAST:event_exitActionPerformed

    private void simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanActionPerformed
        String rolename=role.getText(); 
        String roleid=null;
        // TODO add your handling code here:
        
        
        if (rolename.isEmpty()) 	
        {
           JOptionPane.showMessageDialog(null,"Role Name Belum Di Isi"); 
           role.requestFocus(); 	
        }else{
            //isi dengan CRUD Insert data dan update data
        }
       String namarole=role.getText(); 
       String idrole=null;
        
        java.util.Date tanggal = new java.util.Date();
        java.text.SimpleDateFormat TanggalFormat= new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String datacreate=TanggalFormat.format(tanggal);

    if (rolename.isEmpty()) 	
   {
      JOptionPane.showMessageDialog(null,"Role Name Belum Di Isi"); 
      role.requestFocus(); 	
   }else{
          try{
            Statement StrU=(Statement)Koneksi.Getkoneksi().createStatement();  
            Statement StrI=(Statement)Koneksi.Getkoneksi().createStatement(); 
            Statement Str=(Statement)Koneksi.Getkoneksi().createStatement();

            String sql="select *from trole where namarole='"+rolename+"'"; 
            ResultSet rs=Str.executeQuery(sql); 
            rolename=role.getText();
             if (rs.next())
            {
                //jika data sudah ada
            StrU.executeUpdate("update trole set datamodify='"+datacreate+"',namarole='"+ role.getText() +"' where namarole='"+ rolename+"'"); 
                JOptionPane.showMessageDialog(null, "Data  Ubah","Update",JOptionPane.INFORMATION_MESSAGE);
                role.requestFocus();
                HeaderTable();
            }else{
                //jika data belum ada
                StrI.executeUpdate("insert into trole(namarole,datacreate,datamodify)values('"+rolename+"','"+datacreate+"','"+datacreate+"')"); 
                JOptionPane.showMessageDialog(null, "Data Sudah Di Simpan","Insert",JOptionPane.INFORMATION_MESSAGE); 
               HeaderTable();
            }


//isi dengan Proses CRUD
         }
          catch(SQLException e){
                          JOptionPane.showMessageDialog(this, "Update atau Insert Gagal\n"+e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
      }

       //isi dengan CRUD Insert data dan update data
   }
    



    }//GEN-LAST:event_simpanActionPerformed

    private void TroleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TroleKeyPressed

        // TODO add your handling code here:
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) 
            { // begin 
                simpan .requestFocus();   //panggil komp
    } 

    }//GEN-LAST:event_TroleKeyPressed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
    int row = Trole.getSelectedRow(); // Ambil baris yang dipilih
    if (row == -1) {
        JOptionPane.showMessageDialog(null, "Pilih data yang ingin diperbarui!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String roleid = model.getValueAt(row, 0).toString(); // Ambil Role ID
    String rolename = role.getText(); // Ambil teks dari input field

    if (rolename.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Role Name tidak boleh kosong!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Ambil waktu saat ini untuk Date Modify
    java.util.Date tanggal = new java.util.Date();
    java.text.SimpleDateFormat TanggalFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String datamodify = TanggalFormat.format(tanggal);

    int confirm = JOptionPane.showConfirmDialog(null, "Yakin ingin memperbarui data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        try {
            Statement stmt = Koneksi.Getkoneksi().createStatement();
            String sql = "UPDATE trole SET namarole='" + rolename + "', datamodify='" + datamodify + "' WHERE roleid='" + roleid + "'";
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "Data berhasil diperbarui", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            HeaderTable(); 
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Gagal memperbarui data\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
}   


        // TODO add your handling code here:
    }//GEN-LAST:event_updateActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        

        // TODO add your handling code here:
    }//GEN-LAST:event_exportActionPerformed

    private void TroleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TroleMouseClicked
                // TODO add your handling code here:
         role.setText(model.getValueAt(Trole.getSelectedRow(),1)+"");
         rool_id=(model.getValueAt(Trole.getSelectedRow(),0)+"");

    }//GEN-LAST:event_TroleMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JframeRole.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JframeRole.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JframeRole.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JframeRole.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JframeRole().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Trole;
    private javax.swing.JButton del;
    private javax.swing.JButton exit;
    private javax.swing.JButton export;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField role;
    private javax.swing.JButton simpan;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
